name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: build/
          retention-days: 1

  type-check:
    name: type-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type checking
        run: npm run check

  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint and Prettier checks
        run: npm run lint

  unit-tests:
    name: unit-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:run

      - name: Generate test coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  e2e-tests:
    name: e2e-tests
    strategy:
      matrix:
        test-mode: [essential]
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: build/

      - name: Check WebSocket service availability
        run: |
          echo "Checking WebSocket service availability..."
          curl -f --connect-timeout 10 --max-time 15 https://echo.websocket.org || echo "WebSocket service may be slow/unavailable"
        continue-on-error: true

      - name: Run essential E2E tests
        run: npx playwright test tests/e2e/websocket-flows.spec.ts --project=chromium --reporter=line
        env:
          CI: true
          PLAYWRIGHT_CI: true
          PLAYWRIGHT_TIMEOUT: 60000
        timeout-minutes: 10

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-${{ matrix.test-mode }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  security-audit:
    name: security-audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Check for known vulnerabilities
        run: npx better-npm-audit audit --level moderate
        continue-on-error: true

  # Summary job for branch protection status checks
  ci-status:
    name: ci-status
    runs-on: ubuntu-latest
    needs: [build, type-check, lint, unit-tests, e2e-tests, security-audit]
    if: always()
    steps:
      - name: Check CI status
        run: |
          if [[ "${{ needs.build.result }}" == "success" && \
                "${{ needs.type-check.result }}" == "success" && \
                "${{ needs.lint.result }}" == "success" && \
                "${{ needs.unit-tests.result }}" == "success" && \
                "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "All required checks passed ✅"
            exit 0
          else
            echo "Some required checks failed ❌"
            echo "Build: ${{ needs.build.result }}"
            echo "Type Check: ${{ needs.type-check.result }}"
            echo "Lint: ${{ needs.lint.result }}"
            echo "Unit Tests: ${{ needs.unit-tests.result }}"
            echo "E2E Tests: ${{ needs.e2e-tests.result }}"
            echo "Security Audit: ${{ needs.security-audit.result }} (informational)"
            exit 1
          fi
