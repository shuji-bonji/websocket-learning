name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: build/
          retention-days: 1

  type-check:
    name: type-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type checking
        run: npm run check

  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint and Prettier checks
        run: npm run lint

  unit-tests:
    name: unit-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:run

      - name: Generate test coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          PUBLIC_MOCK_WS_ENABLED: true

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests (excluding visual regression)
        run: npx playwright test tests/e2e/websocket-flows.spec.ts --project=chromium --reporter=line
        env:
          CI: true
          PLAYWRIGHT_CI: true
          PLAYWRIGHT_TIMEOUT: 60000
        timeout-minutes: 8
        continue-on-error: true

  security-audit:
    name: security-audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Check for known vulnerabilities
        run: npx better-npm-audit audit --level moderate
        continue-on-error: true

  # Summary job for branch protection status checks
  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [build, type-check, lint, unit-tests, e2e-tests, security-audit]
    if: always()
    steps:
      - name: Check CI Status
        run: |
          # needsコンテキストから結果を取得
          BUILD_RESULT="${{ needs.build.result }}"
          TYPE_CHECK_RESULT="${{ needs.type-check.result }}"
          LINT_RESULT="${{ needs.lint.result }}"
          UNIT_TESTS_RESULT="${{ needs.unit-tests.result }}"
          E2E_TESTS_RESULT="${{ needs.e2e-tests.result }}"
          AUDIT_RESULT="${{ needs.security-audit.result }}"

          # E2Eテストがスキップされた場合や失敗した場合も成功とみなす（外部WebSocketサービス依存のため）
          if [[ "$E2E_TESTS_RESULT" == "skipped" || "$E2E_TESTS_RESULT" == "failure" ]]; then
            echo "⚠️  E2E Tests: $E2E_TESTS_RESULT (External WebSocket services may be unavailable - treating as non-blocking)"
            E2E_TESTS_RESULT="success"
          fi

          # 必須チェック（E2Eは外部サービス依存のため除外）
          if [[ "$BUILD_RESULT" == "success" && \
                "$TYPE_CHECK_RESULT" == "success" && \
                "$LINT_RESULT" == "success" && \
                "$UNIT_TESTS_RESULT" == "success" ]]; then
            echo "All core checks passed ✅"
            echo "Build: $BUILD_RESULT ✅"
            echo "Type Check: $TYPE_CHECK_RESULT ✅"
            echo "Lint: $LINT_RESULT ✅"
            echo "Unit Tests: $UNIT_TESTS_RESULT ✅"
            echo "E2E Tests: ${{ needs.e2e-tests.result }} (ℹ️  Non-blocking for WebSocket learning project)"
            echo "Security Audit: $AUDIT_RESULT ✅ (informational)"
            exit 0
          else
            echo "Some core checks failed ❌"
            echo "Build: $BUILD_RESULT"
            echo "Type Check: $TYPE_CHECK_RESULT"
            echo "Lint: $LINT_RESULT"
            echo "Unit Tests: $UNIT_TESTS_RESULT"
            echo "E2E Tests: ${{ needs.e2e-tests.result }} (ℹ️  Non-blocking)"
            echo "Security Audit: $AUDIT_RESULT (informational)"
            exit 1
          fi
