---
title: "HTTP/1.1からHTTP/3までのWebSocket対応"
description: "HTTPの各バージョンにおけるWebSocket対応状況と特徴を比較し、最適な実装戦略を学習します"
duration: 45
difficulty: "intermediate"
phase: 1
lesson: "2.3"
---

<script>
	import LessonLayout from '$lib/components/common/LessonLayout.svelte';
	import Section from '$lib/components/common/Section.svelte';
	import Card from '$lib/components/common/Card.svelte';
	import Mermaid from '$lib/components/Mermaid.svelte';
</script>

<LessonLayout
	lessonId="phase1-network-tech-http-versions"
	title="HTTP/1.1からHTTP/3までのWebSocket対応"
	duration="45分"
	difficulty="intermediate"
	prerequisites={['HTTP基礎', 'OSI参照モデル', 'ネットワーク通信の基本概念']}
	sectionTitle="ネットワーク技術基礎"
	nextLessonId="phase1-network-tech-tcp-websocket"
	nextLessonTitle="TCPとWebSocketの関係"
	nextLessonPath="/phase1/network-tech/tcp-websocket"
	learningObjectives={[
		'HTTPの各バージョンにおけるWebSocket対応状況を理解',
		'HTTP/2での双方向通信と制限事項を把握',
		'HTTP/3（QUIC）とWebSocketの関係を理解',
		'各バージョンでの最適な実装戦略を習得'
	]}
>

<Section title="学習内容" icon="📚">
	<Card title="このレッスンで学ぶこと" icon="📋" accentColor="blue">
		<p>HTTPの進化とWebSocketの対応状況を理解し、各バージョンでの最適な実装戦略を学習します。</p>
		<ul>
			<li><strong>HTTP/1.1でのWebSocket実装</strong>とアップグレードメカニズム</li>
			<li><strong>HTTP/2の双方向通信</strong>とWebSocketとの比較</li>
			<li><strong>HTTP/3（QUIC）</strong>でのWebSocket over HTTP/3</li>
			<li><strong>各バージョンでの最適な選択肢</strong>と実装戦略</li>
		</ul>
	</Card>
</Section>

<Section title="HTTP/1.1とWebSocket" icon="🔄">
	<Card title="WebSocketの基盤プロトコル" icon="🌐" accentColor="green">
		<p><strong>HTTP/1.1</strong>は現在のWebSocketの基盤となる重要なプロトコルです。</p>
		
		<h4 class="font-semibold mt-4 mb-2">WebSocketハンドシェイク（HTTP/1.1）</h4>
		
		<div class="bg-gray-50 p-4 rounded-lg font-mono text-sm">
```http
GET /websocket HTTP/1.1
Host: example.com
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==
Sec-WebSocket-Version: 13
```
		</div>
		
		<h4 class="font-semibold mt-4 mb-2">サーバーレスポンス</h4>
		
		<div class="bg-gray-50 p-4 rounded-lg font-mono text-sm">
```http
HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=
```
		</div>
		
		<div class="mt-4 p-4 bg-green-50 rounded-lg">
			<h5 class="font-medium text-green-800">✅ HTTP/1.1の優位性</h5>
			<ul class="text-sm text-green-700 mt-2 space-y-1">
				<li>• 完全なWebSocket対応</li>
				<li>• 最も安定した実装</li>
				<li>• 幅広いブラウザサポート</li>
				<li>• 豊富な実装例とドキュメント</li>
			</ul>
		</div>
	</Card>
</Section>

<Section title="HTTP/2での双方向通信" icon="⚡">
	<Card title="Server Push vs WebSocket" icon="🔀" accentColor="orange">
		<p><strong>HTTP/2</strong>では新しい双方向通信機能が追加されましたが、WebSocketとは異なる特徴があります。</p>
		
		<div class="grid md:grid-cols-2 gap-6 my-6">
			<div class="bg-orange-50 p-4 rounded-lg">
				<h4 class="font-semibold text-orange-800 mb-2">🔄 HTTP/2 Server Push</h4>
				<ul class="text-sm text-orange-700 space-y-1">
					<li>• サーバーからクライアントへの一方向</li>
					<li>• リクエスト/レスポンスモデル</li>
					<li>• ブラウザでの対応が限定的</li>
					<li>• 多くのブラウザで廃止予定</li>
				</ul>
			</div>
			
			<div class="bg-blue-50 p-4 rounded-lg">
				<h4 class="font-semibold text-blue-800 mb-2">🌐 WebSocket over HTTP/2</h4>
				<ul class="text-sm text-blue-700 space-y-1">
					<li>• 真の双方向通信</li>
					<li>• 永続的接続</li>
					<li>• リアルタイム通信に最適</li>
					<li>• HTTP/2上でのWebSocketサポート</li>
				</ul>
			</div>
		</div>
		
		<div class="mt-4 p-4 bg-yellow-50 rounded-lg">
			<h5 class="font-medium text-yellow-800">⚠️ 注意点</h5>
			<p class="text-sm text-yellow-700 mt-2">
				HTTP/2 Server Pushは多くのブラウザで廃止され、WebSocketが双方向通信の標準となっています。
			</p>
		</div>
	</Card>
</Section>

<Section title="HTTP/3（QUIC）とWebSocket" icon="🚀">
	<Card title="次世代プロトコルでの対応" icon="🔮" accentColor="purple">
		<p><strong>HTTP/3</strong>はQUICプロトコルベースの新しいHTTPバージョンです。</p>
		
		<h4 class="font-semibold mt-4 mb-2">WebSocket over HTTP/3の特徴</h4>
		
		<div class="space-y-3">
			<div class="bg-purple-50 p-4 rounded-lg">
				<h5 class="font-medium text-purple-800">🔮 WebSocket over HTTP/3</h5>
				<ul class="text-sm text-purple-700 mt-2 space-y-1">
					<li>• QUICによる低遅延通信</li>
					<li>• 接続の迅速な確立</li>
					<li>• ネットワーク切り替え時の耐性</li>
					<li>• 0-RTTリコネクション</li>
				</ul>
			</div>
			
			<div class="bg-blue-50 p-4 rounded-lg">
				<h5 class="font-medium text-blue-800">🌐 WebTransport</h5>
				<ul class="text-sm text-blue-700 mt-2 space-y-1">
					<li>• HTTP/3上での新しい双方向通信API</li>
					<li>• DatagramとStreamのサポート</li>
					<li>• WebSocketに代わる選択肢</li>
					<li>• 現在実験的実装段階</li>
				</ul>
			</div>
		</div>
		
		<div class="mt-4 p-4 bg-gray-50 rounded-lg">
			<h5 class="font-medium text-gray-800">📊 現在の対応状況（2024年）</h5>
			<ul class="text-sm text-gray-700 mt-2 space-y-1">
				<li>• <strong>WebSocket over HTTP/3</strong>: 一部ブラウザで実装中</li>
				<li>• <strong>WebTransport</strong>: Chrome/Edgeで実験的サポート</li>
				<li>• <strong>サーバーサポート</strong>: 主要Webサーバーで対応進行中</li>
			</ul>
		</div>
	</Card>
</Section>

<Section title="各バージョンでの最適戦略" icon="🎯">
	<Card title="現在（2024年）の推奨実装" icon="✅" accentColor="green">
		<h4 class="font-semibold mb-4">主流な選択</h4>
		
<div class="bg-gray-50 p-4 rounded-lg font-mono text-sm">
<pre><code class="language-javascript">// 1. WebSocket（HTTP/1.1ベース）- 最も安定
const socket = new WebSocket('wss://api.example.com/ws');

// 2. フォールバック戦略の実装
class RobustWebSocket {
    constructor(url) {
        this.url = url;
        this.connect();
    }
    
    connect() {
        try {
            this.socket = new WebSocket(this.url);
            this.socket.onopen = () => console.log('Connected via WebSocket');
        } catch (error) {
            console.log('WebSocket failed, considering alternatives...');
            this.fallbackToHTTP2();
        }
    }
    
    fallbackToHTTP2() {
        // HTTP/2 Server-Sent Events での代替実装
        const eventSource = new EventSource('/api/events');
        eventSource.onmessage = (event) => {
            console.log('Received via SSE:', event.data);
        };
    }
}
</code></pre>
</div>
	</Card>
	
	<Card title="将来への準備" icon="🔮" accentColor="blue">
		<h4 class="font-semibold mb-4">次世代対応の準備</h4>
		
<div class="bg-gray-50 p-4 rounded-lg font-mono text-sm">
<pre><code class="language-javascript">// WebTransport対応の準備（実験的）
if ('WebTransport' in window) {
    const transport = new WebTransport('https://example.com/webtransport');
    await transport.ready;
    
    // Datagram API使用例
    const writer = transport.datagrams.writable.getWriter();
    await writer.write(new Uint8Array([1, 2, 3, 4]));
} else {
    // WebSocketフォールバック
    const socket = new WebSocket('wss://example.com/websocket');
}
</code></pre>
</div>
		
		<div class="mt-4 p-4 bg-blue-50 rounded-lg">
			<h5 class="font-medium text-blue-800">🔮 将来の展望</h5>
			<ul class="text-sm text-blue-700 mt-2 space-y-1">
				<li>• WebTransportの標準化と普及</li>
				<li>• HTTP/3でのWebSocket性能向上</li>
				<li>• モバイルネットワークでの最適化</li>
				<li>• Edge ComputingでのWebSocket活用</li>
			</ul>
		</div>
	</Card>
</Section>

<Section title="まとめ" icon="📊">
	<Card title="重要なポイント" icon="🎯" accentColor="indigo">
		<div class="grid md:grid-cols-2 gap-4">
			<div>
				<h4 class="font-semibold text-indigo-800 mb-2">現在の実装戦略</h4>
				<ul class="space-y-1 text-sm text-indigo-700">
					<li>✓ HTTP/1.1ベースのWebSocketが主流</li>
					<li>✓ HTTP/2 Server Pushは廃止傾向</li>
					<li>✓ WebSocketが双方向通信の標準</li>
					<li>✓ フォールバック戦略の重要性</li>
				</ul>
			</div>
			<div>
				<h4 class="font-semibold text-indigo-800 mb-2">将来への準備</h4>
				<ul class="space-y-1 text-sm text-indigo-700">
					<li>✓ HTTP/3でのWebSocket対応</li>
					<li>✓ WebTransportの可能性</li>
					<li>✓ プログレッシブ対応戦略</li>
					<li>✓ パフォーマンス最適化</li>
				</ul>
			</div>
		</div>
	</Card>
</Section>

</LessonLayout>